library(pegas)
read.dna("aequicauda_and_MacDonald.aln.fa")
read.dna("aequicauda_and_MacDonald.aln.fa", format = 'fasta')
algn <- read.dna("aequicauda_and_MacDonald.aln.fa", format = 'fasta')
COI <- read.dna("aequicauda_and_MacDonald.aln.fa", format = 'fasta')
COIHaps <- haplotype(COI)
COINet <- haploNet(COIHaps)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE)
COINet
COI <- read.dna("aequicauda_and_cf_579.fa", format = 'fasta')
COIHaps <- haplotype(COI)
COINet <- haploNet(COIHaps)
COINet
plot(COINet, size = attr(COINet, "freq"), fast = FALSE)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = 2)
COI <- read.dna("aequicauda_and_MacDonald.aln.fa", format = 'fasta')
COIHaps <- haplotype(COI)
COINet <- haploNet(COIHaps)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = 2)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = 20)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = .2)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = .5)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = 1)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = 0.8)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = 0.5)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = 0.75)
library(pegas)
COI <- read.dna("aequicauda_and_MacDonald.aln.fa", format = 'fasta')
COIHaps <- haplotype(COI)
COINet <- haploNet(COIHaps)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = 0.75)
library(pegas)
setwd("/mnt/Work/Research/Colleagues/NVShadrin/Gammarus_aequicauda")
COI <- read.dna("aequicauda_and_MacDonald.aln.fa", format = 'fasta')
COIHaps <- haplotype(COI)
COINet <- haploNet(COIHaps)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = 0.75)
COI <- read.dna("aequicauda_Moinaki.fa", format = 'fasta')
COIHaps <- haplotype(COI)
COINet <- haploNet(COIHaps)
plot(COINet, size = attr(COINet, "freq"), fast = FALSE, scale.ratio = 0.75)
ind.hap<-with(
stack(setNames(attr(COIHaps, "index"), rownames(COIHaps))),
table(hap=ind, individuals=rownames(COI)[values]))
setwd("/mnt/Work/Research/Projects/Genome/texts/2023_Ecy_phylotranscr_paper/figs_data/EcyLxPB_cross_git/Figs_crosses")
library("ggmap")
library(scales)
library(ggrepel)
library(ggpubr)
set.seed(2)
sampling_points <- data.frame(lat = c(51.90324, 51.870608, 51.870684, 51.64667),  #BK, L, PB, SR
lon = c(105.0688, 104.828101, 104.811648, 103.75389),
col = c("orange", "#F0E442", "#4477AA", "royalblue"),
label = c("BK", "L", "PB", "SR"))
bbox <- c(left=102, right=112, bottom=51, top=56.2) # Baikal
mbox <- c(left=103, right=106, bottom=51.25, top=52.5) # Southern Baikal
#mbox <- c(left=103.6, right=105.1, bottom=51.6, top=52) # from SR to PB (a narrow strip)
sbox <- c(left=104.6, right=105, bottom=51.75, top=52) # Angara source only
## Large (complete Baikal, small scale)
BaikalMap <- get_stadiamap(bbox, zoom=8, maptype = "stamen_terrain_background")
knitr::opts_chunk$set(echo = TRUE)
library(dada2)
packageVersion("dada2")
taxa <- load(file="taxa.R")
taxa <- load(file="taxa.R")
library(phyloseq); packageVersion("phyloseq")
library(Biostrings); packageVersion("Biostrings")
library(ggplot2); packageVersion("ggplot2")
theme_set(theme_bw())
samples.out <- rownames(seqtab.nochim)
knitr::opts_chunk$set(echo = TRUE)
library(dada2)
packageVersion("dada2")
path <- "../1_raw_data/2024_04_18S/"
dir(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs) ## I have just three, let's take a look at all
plotQualityProfile(fnRs)
sample.names <- c("160323_5", "210622_5", "220223_0")
filtFs <- file.path("./18S_filtered/", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path("./18S_filtered/", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,150),
matchIDs = TRUE,
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
dadaFs <- dada(filtFs, err=errF, multithread=TRUE)
dadaRs <- dada(filtRs, err=errR, multithread=TRUE)
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
for(i in seq_along(sample.names)) {
uniquesToFasta(mergers[[i]], paste0("merged_reads", sample.names[i], ".fasta"))
#uniquesToFasta(seqtab.nochim[[i]], paste0("path/to/sample_", i, ".fasta"))
}
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
#taxa <- assignTaxonomy(seqtab.nochim, "../1_databases/silva_132.18s.99_rep_set.dada2.fa.gz", multithread=TRUE)
taxa <- load(file="taxa.R")
library(phyloseq); packageVersion("phyloseq")
library(Biostrings); packageVersion("Biostrings")
library(ggplot2); packageVersion("ggplot2")
theme_set(theme_bw())
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "D"), `[`, 1)
gender <- substr(subject,1,1)
subject <- substr(subject,2,999)
day <- as.integer(sapply(strsplit(samples.out, "D"), `[`, 2))
samdf <- data.frame(Subject=subject, Gender=gender, Day=day)
samdf$When <- "Early"
samdf$When[samdf$Day>100] <- "Late"
rownames(samdf) <- samples.out
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
tax_table(taxa)
taxa
taxa <- load(file="taxa.R")
taxa
taxa <- readRDS(file="taxa.RDS")
library(phyloseq); packageVersion("phyloseq")
library(Biostrings); packageVersion("Biostrings")
library(ggplot2); packageVersion("ggplot2")
theme_set(theme_bw())
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "D"), `[`, 1)
gender <- substr(subject,1,1)
subject <- substr(subject,2,999)
day <- as.integer(sapply(strsplit(samples.out, "D"), `[`, 2))
samdf <- data.frame(Subject=subject, Gender=gender, Day=day)
samdf$When <- "Early"
samdf$When[samdf$Day>100] <- "Late"
rownames(samdf) <- samples.out
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
ps
plot_richness(ps, x="Day", measures=c("Shannon", "Simpson"), color="When")
ps
plot_richness(ps, x="sample", measures=c("Shannon", "Simpson")) #, color="When")
plot_richness(ps, x="sample", measures=c("Shannon", "Simpson")) #, color="When")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Day", fill="Family") + facet_wrap(~When, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="sample", fill="Family") #+ facet_wrap(~When, scales="free_x")
ps.top20
str(ps.top20)
ps.top20@sam_data
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Subject", fill="Family") #+ facet_wrap(~When, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Subject", fill="Family") #+ facet_wrap(~When, scales="free_x")
plot_bar(ps.top20, x="Kingdom", fill="Family") #+ facet_wrap(~When, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Subject", fill="Family") #+ facet_wrap(~When, scales="free_x")
plot_bar(ps.top20, x="Subject", fill="Kingdom") #+ facet_wrap(~When, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Subject", fill="Family") #+ facet_wrap(~When, scales="free_x")
plot_bar(ps.top20, x="Subject", fill="Kingdom") #+ facet_wrap(~When, scales="free_x")
plot_bar(ps.top20, x="Subject", fill="Phylum") #+ facet_wrap(~When, scales="free_x")
